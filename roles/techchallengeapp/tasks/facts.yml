---
# sets facts for some important IDs and IPs of our VPC

# find the VPC by name
- name: VPC facts
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ vpc_name }}"
  register: vpc_facts

# parse the facts output and extract the VPC ID
- name: "set fact: VPC ID"
  set_fact:
    vpc_id: "{{ vpc_facts.vpcs[0].id }}"

# find our subnets by VPC ID that was just defined
- name: VPC subnet facts
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_subnet_facts

# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each subnet found by the facts query
# - for that subnet, define a "name: id" entry in the `vpc_subnet_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "create fact list: VPC subnet IDs"
  set_fact:
    vpc_subnet_ids_item: "{{ ({ 'key': item.tags.Name, 'value': item.subnet_id }) }}"
    # Code would not working as per design and not letting me use a straight disctionary, problem with ansible version
    # Have to add dictionary item as array, ie an array of dictionaries. Ugly
  with_items: "{{ vpc_subnet_facts.subnets }}"
  register: vpc_subnet_ids_item_result

- name: "set fact list: VPC subnet IDs"
  set_fact: 
    vpc_subnet_ids: "{{ vpc_subnet_ids_item_result.results | map(attribute='ansible_facts.vpc_subnet_ids_item') | list }}"

- name: set fact private-a
  set_fact:
    private_a_subnet_id: "{{ item.value }}"
  when: (item.key == "private-a")
  with_items: "{{ vpc_subnet_ids }}"

- name: set fact private-b
  set_fact:
    private_b_subnet_id: "{{ item.value }}"
  when: (item.key == "private-b")
  with_items: "{{ vpc_subnet_ids }}"

- name: set fact private-c
  set_fact:
    private_c_subnet_id: "{{ item.value }}"
  when: (item.key == "private-c")
  with_items: "{{ vpc_subnet_ids }}"

- name: set fact public-a
  set_fact:
    public_a_subnet_id: "{{ item.value }}"
  when: (item.key == "public-a")
  with_items: "{{ vpc_subnet_ids }}"

- name: set fact public-b
  set_fact:
    public_b_subnet_id: "{{ item.value }}"
  when: (item.key == "public-b")
  with_items: "{{ vpc_subnet_ids }}"

- name: set fact public-c
  set_fact:
    public_c_subnet_id: "{{ item.value }}"
  when: (item.key == "public-c")
  with_items: "{{ vpc_subnet_ids }}"

# find our security groups by VPC ID
- name: VPC security group facts
  ec2_group_info:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_security_group_facts

# parse the facts output and extract the IDs with some fancy filter work:
# - iterate each security group found by the facts query
# - for that group, define a "name: id" entry in the `vpc_security_group_ids` dictionary (or empty dictionary if it doesn't exist)
- name: "create list: VPC security group IDs"
  set_fact:
    # vpc_security_group_ids: "{{ vpc_security_group_ids | default({}) | combine({ (item.group_name | default('default')): item.group_id }) }}"
    vpc_security_group_ids_item: "{{ ({ 'key': item.group_name, 'value': item.group_id}) }}"
     # Code would not working as per design and not letting me use a straight disctionary, problem with ansible version
    # Have to add dictionary item as array, ie an array of dictionaries. Ugly
  loop: "{{ vpc_security_group_facts.security_groups }}"
  register: vpc_security_group_ids_result

- name: "set fact: VPC security group IDs"
  set_fact: 
    vpc_security_group_ids: "{{ vpc_security_group_ids_result.results | map(attribute='ansible_facts.vpc_security_group_ids_item') | list }}"

- name: set fact vpc-security-group
  set_fact:
    vpc_security_group_ids_vpc: "{{ item.value }}"
  when: (item.key == "{{ project_name }}-RDS")
  with_items: "{{ vpc_security_group_ids }}"

- name: set fact vpc-security-group
  set_fact:
    vpc_security_group_ids_public_http: "{{ item.value }}"
  when: (item.key == "{{ project_name }}-WebDMZ")
  with_items: "{{ vpc_security_group_ids }}"
